import google.generativeai as genai
from PIL import Image
import io
import json
import re
import time
import asyncio
from typing import Dict, Any
import logging
from config import settings

logger = logging.getLogger(__name__)


class FacialAnalysisService:
    """
    Servicio para realizar an√°lisis facial usando Google AI Studio
    """

    def __init__(self):
        # Configurar la API key para Google AI
        genai.configure(api_key=settings.GOOGLE_AI_API_KEY)
        self.model = genai.GenerativeModel(settings.AI_MODEL_NAME)
        self.max_retries = 3
        self.retry_delay = 2

    async def analyze_facial_attractiveness(self, image_bytes: bytes) -> Dict[str, Any]:
        """
        Analiza el atractivo facial basado en criterios cient√≠ficos
        """
        start_time = time.time()

        try:
            # Convertir bytes a imagen PIL
            image = Image.open(io.BytesIO(image_bytes))

            # Optimizar imagen para IA
            image = self._optimize_image_for_ai(image)

            # Crear prompt cient√≠fico
            prompt = self._create_analysis_prompt()

            # Realizar an√°lisis con reintentos
            for attempt in range(self.max_retries):
                try:
                    logger.info(f"ü§ñ Intento {attempt + 1} de an√°lisis con IA")

                    # Generar contenido con configuraci√≥n optimizada
                    response = await self._generate_content_async(prompt, image)

                    # Parsear respuesta
                    analysis_result = self._parse_ai_response(response.text)

                    # Validar resultado
                    self._validate_analysis_result(analysis_result)

                    # Agregar metadatos
                    analysis_result['processing_time'] = time.time() - \
                        start_time
                    analysis_result['ai_model'] = settings.AI_MODEL_NAME
                    analysis_result['attempt'] = attempt + 1

                    logger.info(
                        f"‚úÖ An√°lisis completado en {analysis_result['processing_time']:.2f}s")
                    return analysis_result

                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Intento {attempt + 1} fall√≥: {str(e)}")
                    if attempt == self.max_retries - 1:
                        raise
                    await asyncio.sleep(self.retry_delay)

        except Exception as e:
            logger.error(f"‚ùå Error en an√°lisis con IA: {str(e)}")
            # Devolver resultado por defecto en caso de error
            return self._get_default_analysis_result(str(e))

    async def _generate_content_async(self, prompt: str, image: Image.Image):
        """
        Generar contenido de forma as√≠ncrona
        """
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(
            None,
            self.model.generate_content,
            [prompt, image]
        )

    def _optimize_image_for_ai(self, image: Image.Image) -> Image.Image:
        """
        Optimizar imagen para an√°lisis de IA
        """
        # Redimensionar si es muy grande
        max_size = (800, 800)
        if image.size[0] > max_size[0] or image.size[1] > max_size[1]:
            image.thumbnail(max_size, Image.Resampling.LANCZOS)

        # Asegurar modo RGB
        if image.mode != 'RGB':
            image = image.convert('RGB')

        return image

    def _create_analysis_prompt(self) -> str:
        """
        Crear el prompt cient√≠fico para el an√°lisis facial
        """
        return """
        Eres un experto en an√°lisis facial cient√≠fico, antropometr√≠a y psicolog√≠a de la percepci√≥n. Analiza esta imagen facial y proporciona un an√°lisis exhaustivo basado en criterios cient√≠ficos multidisciplinarios de atractivo facial.

        INSTRUCCIONES CR√çTICAS:
        1. Responde √öNICAMENTE en formato JSON v√°lido
        2. NO incluyas texto antes o despu√©s del JSON
        3. Usa n√∫meros decimales para todas las puntuaciones (ejemplo: 7.5, no 7,5)
        4. S√© espec√≠fico y detallado en tu an√°lisis
        5. Mant√©n un tono cient√≠fico pero comprensible
        6. Proporciona insights √∫nicos y personalizados

        FORMATO REQUERIDO:
        {
            "status": "[string: 'denied', 'improvable' o 'feasible']",
            "overall_score": [n√∫mero de 0-10 con decimales],
            "symmetry_score": [n√∫mero de 0-10 con decimales],
            "proportion_score": [n√∫mero de 0-10 con decimales],
            "skin_quality_score": [n√∫mero de 0-10 con decimales],
            "features_harmony_score": [n√∫mero de 0-10 con decimales],
            "eye_appeal_score": [n√∫mero de 0-10 con decimales],
            "nose_harmony_score": [n√∫mero de 0-10 con decimales],
            "lip_aesthetics_score": [n√∫mero de 0-10 con decimales],
            "jawline_definition_score": [n√∫mero de 0-10 con decimales],
            "cheekbone_prominence_score": [n√∫mero de 0-10 con decimales],
            "facial_composition_score": [n√∫mero de 0-10 con decimales],
            "scientific_explanation": "[explicaci√≥n exhaustiva de 300-500 palabras]",
            "recommendations": "[recomendaciones espec√≠ficas de 200-350 palabras]"
        }

        CRITERIOS DE EVALUACI√ìN CIENT√çFICA AVANZADA:

        1. SIMETR√çA FACIAL (symmetry_score):
        - Analiza simetr√≠a bilateral usando landmarks faciales espec√≠ficos
        - Eval√∫a desviaciones en: l√≠nea media facial, posici√≥n de ojos, altura de cejas, comisuras labiales
        - Considera micro-asimetr√≠as y su impacto en percepci√≥n (Grammer & Thornhill, 1994)
        - Mide concordancia entre hemifacies izquierda y derecha
        - Eval√∫a simetr√≠a din√°mica vs est√°tica (Rhodes et al., 2001)

        2. PROPORCIONES FACIALES (proportion_score):
        - Ratio facial vertical: altura total vs ancho (ideal ~1.6-1.8)
        - Tercios faciales: frente, zona media, tercio inferior (cada uno ~33%)
        - Quintos horizontales: 5 anchos de ojos a lo largo del rostro
        - Proporci√≥n nasal: ancho nasal vs distancia intercantal
        - Ratio labial: altura del labio superior vs inferior (ideal 1:2)
        - √Ångulo nasofrontal y nasolabial (Marquardt, 2005)

        3. CALIDAD DE PIEL (skin_quality_score):
        - Uniformidad crom√°tica y textural
        - Presencia/ausencia de: manchas, cicatrices, poros dilatados, l√≠neas finas
        - Luminosidad y translucidez (indicadores de salud - Fink et al., 2006)
        - Tono de piel y saturaci√≥n crom√°tica
        - Signos de fotoenvejecimiento y estr√©s oxidativo

        4. ARMON√çA Y DEFINICI√ìN FACIAL (features_harmony_score):
        - Coherencia entre tama√±o y forma de todos los rasgos
        - Definici√≥n de estructura √≥sea: p√≥mulos, mand√≠bula, ment√≥n
        - Proyecci√≥n y volumen de rasgos (nariz, labios, ojos)
        - Equilibrio entre rasgos ne√≥tenicos y maduros
        - Dimorfismo sexual apropiado sin exageraci√≥n
        - Expresividad y calidez facial (Jones et al., 2004)

        5. ATRACTIVO OCULAR (eye_appeal_score):
        - Forma, tama√±o y posici√≥n de los ojos
        - Simetr√≠a entre ambos ojos y p√°rpados
        - Definici√≥n de pesta√±as y cejas
        - Proporci√≥n del iris respecto al ojo
        - Expresividad y vivacidad de la mirada

        6. ARMON√çA NASAL (nose_harmony_score):
        - Proporci√≥n nasal respecto al rostro
        - Perfil y proyecci√≥n nasal
        - Simetr√≠a de las fosas nasales
        - √Ångulo nasolabial (ideal 95-105¬∞)
        - Integraci√≥n con otros rasgos faciales

        7. EST√âTICA LABIAL (lip_aesthetics_score):
        - Proporci√≥n entre labio superior e inferior
        - Definici√≥n del arco de cupido
        - Volumen y plenitud labial
        - Simetr√≠a de las comisuras
        - Armon√≠a con la estructura facial

        8. DEFINICI√ìN MANDIBULAR (jawline_definition_score):
        - Claridad de la l√≠nea mandibular
        - √Ångulo gonial (ideal 120-130¬∞)
        - Proporci√≥n mandibular con el rostro
        - Definici√≥n del ment√≥n
        - Masculinidad/feminidad apropiada

        9. PROMINENCIA DE P√ìMULOS (cheekbone_prominence_score):
        - Altura y proyecci√≥n de los p√≥mulos
        - Definici√≥n de la estructura malar
        - Armon√≠a con la estructura √≥sea
        - Creaci√≥n de contornos atractivos
        - Balance con otros rasgos

        10. COMPOSICI√ìN FACIAL GENERAL (facial_composition_score):
        - Balance visual general del rostro
        - Distribuci√≥n arm√≥nica de rasgos
        - Atractivo compositivo total
        - Impacto visual y memorabilidad
        - Coherencia est√©tica integral

        AN√ÅLISIS ADICIONAL REQUERIDO:
        - Eval√∫a la composici√≥n facial general y balance visual
        - Considera el impacto de la iluminaci√≥n y √°ngulo en la percepci√≥n
        - Analiza la expresi√≥n facial y su efecto en atractivo
        - Identifica fortalezas espec√≠ficas √∫nicas del rostro
        - Detecta √°reas de mejora sin ser negativo

        REQUISITOS PARA EXPLICACI√ìN CIENT√çFICA (300-500 palabras):
        - Menciona 4-5 estudios cient√≠ficos espec√≠ficos con autores y a√±os
        - Explica hallazgos espec√≠ficos observados en esta imagen
        - Usa terminolog√≠a antropom√©trica precisa
        - Incluye datos cuantitativos cuando sea posible
        - Conecta caracter√≠sticas f√≠sicas con teor√≠as evolutivas
        - Menciona variaciones culturales en percepci√≥n de belleza

        REQUISITOS PARA RECOMENDACIONES (200-350 palabras):
        - Consejos espec√≠ficos basados en el an√°lisis individual
        - T√©cnicas de maquillaje personalizadas para resaltar fortalezas
        - Sugerencias de peinado que complementen la estructura facial
        - Rutinas de cuidado de piel espec√≠ficas
        - T√©cnicas fotogr√°ficas para maximizar atractivo
        - Consejos de expresi√≥n y postura
        - Recomendaciones de colores que favorezcan el tono de piel
        - NO sugerir cirug√≠a, mantener enfoque en mejora natural

        EVALUACI√ìN DEL ESTADO DE LA IMAGEN (CR√çTICO):
        Antes de realizar cualquier an√°lisis, eval√∫a la imagen y determina el status:

        1. "denied" - USA CUANDO:
        - La imagen NO contiene un rostro humano claro
        - Es un objeto, paisaje, animal, caricatura o dibujo
        - El rostro est√° completamente oculto o no es reconocible
        - La imagen est√° corrupta, muy borrosa o ilegible
        - Hay m√∫ltiples rostros sin uno claramente dominante

        2. "improvable" - USA CUANDO:
        - S√ç hay un rostro pero la calidad es insuficiente para an√°lisis preciso
        - Iluminaci√≥n muy pobre (demasiado oscuro/claro)
        - Rostro parcialmente oculto (m√°s del 30%)
        - Resoluci√≥n muy baja o pixelada
        - √Ångulo extremo que distorsiona las proporciones
        - Sombras fuertes que ocultan rasgos importantes

        3. "feasible" - USA CUANDO:
        - Rostro humano claramente visible y reconocible
        - Calidad suficiente para an√°lisis detallado
        - Iluminaci√≥n aceptable (puede no ser perfecta)
        - La mayor√≠a de rasgos faciales son distinguibles
        - √Ångulo reasonable (frontal o 3/4)

        IMPORTANTE SOBRE PUNTUACIONES:
        - Si status es "denied": Todas las puntuaciones deben ser 0.0
        - Si status es "improvable": Puntuaciones pueden ser bajas (1-4) reflejando la limitaci√≥n
        - Si status es "feasible": Puntuaciones normales basadas en an√°lisis real (1-10)

        IMPORTANTE:
        - S√© honesto pero constructivo en el an√°lisis
        - Cada rostro tiene caracter√≠sticas √∫nicas valiosas
        - El atractivo es subjetivo y culturalmente variable
        - Los resultados son educativos, no definen valor personal
        - Enf√≥cate en potenciar la belleza natural existente
        - El campo "status" es OBLIGATORIO y debe estar siempre presente
        """

    def _parse_ai_response(self, response_text: str) -> Dict[str, Any]:
        """
        Parsea la respuesta de la IA y extrae los datos estructurados
        """
        try:
            # Limpiar el texto de respuesta
            cleaned_text = response_text.strip()

            # Buscar el JSON en la respuesta
            json_match = re.search(r'\{.*\}', cleaned_text, re.DOTALL)

            if not json_match:
                raise ValueError("No se encontr√≥ JSON en la respuesta de IA")

            json_str = json_match.group()

            # Intentar parsear JSON
            try:
                parsed_data = json.loads(json_str)
            except json.JSONDecodeError as e:
                # Intentar limpiar y reparar JSON com√∫n
                json_str = self._repair_json(json_str)
                parsed_data = json.loads(json_str)

            # Validar estructura
            required_keys = [
                'status', 'overall_score', 'symmetry_score', 'proportion_score',
                'skin_quality_score', 'features_harmony_score',
                'scientific_explanation', 'recommendations'
            ]

            for key in required_keys:
                if key not in parsed_data:
                    raise ValueError(
                        f"Clave requerida '{key}' no encontrada en la respuesta")

            # Validar y normalizar status
            valid_statuses = ['denied', 'improvable', 'feasible']
            if parsed_data['status'] not in valid_statuses:
                logger.warning(f"Status inv√°lido: {parsed_data['status']}, usando 'feasible'")
                parsed_data['status'] = 'feasible'

            # Normalizar y validar puntuaciones
            score_keys = [
                'overall_score', 'symmetry_score', 'proportion_score',
                'skin_quality_score', 'features_harmony_score'
            ]

            for key in score_keys:
                score = parsed_data[key]
                if isinstance(score, str):
                    # Convertir strings a float
                    score = float(score.replace(',', '.'))

                # Validar rango
                if not isinstance(score, (int, float)):
                    raise ValueError(f"Puntuaci√≥n {key} debe ser num√©rica")

                if not 0 <= score <= 10:
                    logger.warning(f"Puntuaci√≥n {key} fuera de rango: {score}")
                    score = max(0, min(10, score))  # Clamp to 0-10

                parsed_data[key] = round(float(score), 1)

            # Validar textos
            if len(parsed_data['scientific_explanation'].strip()) < 50:
                raise ValueError("Explicaci√≥n cient√≠fica demasiado corta")

            if len(parsed_data['recommendations'].strip()) < 50:
                raise ValueError("Recomendaciones demasiado cortas")

            return parsed_data

        except Exception as e:
            logger.error(f"‚ùå Error parseando respuesta de IA: {str(e)}")
            raise ValueError(f"Error procesando respuesta de IA: {str(e)}")

    def _repair_json(self, json_str: str) -> str:
        """
        Intenta reparar JSON malformado com√∫n
        """
        # Reemplazar comas decimales por puntos
        json_str = re.sub(r'(\d),(\d)', r'\1.\2', json_str)

        # Escapar comillas dentro de strings
        json_str = re.sub(r'(?<=["\w])"(?=["\w])', r'\"', json_str)

        # Remover trailing commas
        json_str = re.sub(r',(\s*[}\]])', r'\1', json_str)

        return json_str

    def _validate_analysis_result(self, result: Dict[str, Any]) -> None:
        """
        Valida que el resultado del an√°lisis sea coherente
        """
        scores = [
            result['symmetry_score'],
            result['proportion_score'],
            result['skin_quality_score'],
            result['features_harmony_score']
        ]

        # Verificar que el overall_score sea coherente con los scores individuales
        average_score = sum(scores) / len(scores)
        overall_score = result['overall_score']

        # Permitir desviaci√≥n de hasta 1.5 puntos
        if abs(overall_score - average_score) > 1.5:
            logger.warning(
                f"Overall score ({overall_score}) difiere mucho del promedio ({average_score:.1f})")
            # Ajustar overall_score al promedio
            result['overall_score'] = round(average_score, 1)

    def _get_default_analysis_result(self, error_message: str) -> Dict[str, Any]:
        """
        Devuelve un resultado por defecto en caso de error
        """
        return {
            "status": "improvable",
            "overall_score": 5.0,
            "symmetry_score": 5.0,
            "proportion_score": 5.0,
            "skin_quality_score": 5.0,
            "features_harmony_score": 5.0,
            "scientific_explanation": f"‚ùå Error t√©cnico en el an√°lisis: {error_message}. El sistema utiliza criterios cient√≠ficos establecidos basados en investigaci√≥n antropom√©trica y psicolog√≠a de la percepci√≥n. Los par√°metros incluyen an√°lisis de simetr√≠a facial (Langlois & Roggman, 1990), proporciones faciales seg√∫n la secuencia de Fibonacci y ratios √°ureos (Marquardt, 2005), evaluaci√≥n de calidad d√©rmica como indicador de salud (Fink et al., 2006), y an√°lisis de armon√≠a entre rasgos faciales (Rhodes et al., 2001). Para un an√°lisis exitoso, se requiere una imagen de alta calidad con iluminaci√≥n uniforme y el rostro completamente visible.",
            "recommendations": "Para obtener un an√°lisis preciso y completo, considera estos factores t√©cnicos: 1) Iluminaci√≥n: Usa luz natural suave o iluminaci√≥n frontal uniforme, evita sombras duras que distorsionen la percepci√≥n facial. 2) Composici√≥n: El rostro debe ocupar 60-80% del encuadre, estar centrado y en √°ngulo frontal (0-15¬∞). 3) Calidad t√©cnica: Resoluci√≥n m√≠nima de 800x800 p√≠xeles, formato JPEG o PNG sin compresi√≥n excesiva. 4) Expresi√≥n: Mant√©n una expresi√≥n neutra o ligeramente positiva para un an√°lisis objetivo. Adicionalmente, para potenciar tu apariencia natural: mant√©n una rutina de cuidado facial consistente, hidr√°tate adecuadamente, y aseg√∫rate de descansar lo suficiente para una piel radiante.",
            "processing_time": 0.1,
            "ai_model": settings.AI_MODEL_NAME,
            "attempt": 1,
            "error": True
        }
